; This is the Brother boot sector. It's at offset $c00 in the file (sector 1,
; track 1).  It gets loaded at $6000 with CBAR=BBR=CBR=0, which means that the
; entire logical address space is mapped to physical address $00000.
;
; Known locations in the memory map are:
;
; $10000 ; video attribute memory
; $11000 ; video character memory
; $24000 : kernel workspace?
; $25800 : temporary buffer used for loading sectors (0x800 long)
; $27000 : application RAM
; $30000 : top of application RAM
;
; The standard boot sector sets this before loading the application code:
;
;    CBAR  CBR  BBR  bank           common
;     e7    16   20  7000 @ 27000   e000 @ 24000
;
; So: 0000-6fff -> 00000-06fff (base)
;     7000-dfff -> 27000-2dfff (bank)
;     e000-ffff -> 24000-25fff (common)
;
; We want access to the video memory, so we change the mapping to:
;
;    CBAR  CBR  BBR  bank           common
;     e7    02   27  7000 @ 27000   e000 @ 10000
;
;     0000-6fff -> 00000-06fff (base)
;     7000-dfff -> 27000-2dfff (bank)
;     e000-ffff -> 10000-11fff (common, video)
; 
; However, we also need access to the disk transfer buffer at 25800 physical
; f800 logical, so we also use this mapping:
;
;    CBAR  CBR  BBR  bank           common
;     e7    16   27  7000 @ 27000   e000 @ 24000
;
;     0000-6fff -> 00000-06fff (base)
;     7000-dfff -> 27000-2dfff (bank)
;     e000-ffff -> 24000-25fff (common, disk buffers)
; 
; We can switch between the two without upsetting our program by changing CBR.
;
; There's a mirror so that data at $06000 (which should be ROM) is actually
; a view of $26000 so it's safe to change the mapping we're running from.

    maclib z180
    maclib constants

    org $6000
    db $55              ; magic number

entry:
    di
    ld sp, $0000

    xor a
    out0 (ITC), a
    ld c, $0f
    out0 (CNTR), c
    out0 ($d8), a

    ld a, 30
    out0 ($80), a
    ld a, 00101000b
    out0 ($81), a

    ; Switch to sys mode.

    ld c, $e7
    out0 (CBAR), c
    ld c, $16
    out0 (CBR), c
    ld c, $27
    out0 (BBR), c

    ; Clear the screen.

    ld a, $02
    out0 (CBR), a

    ld bc, $0fff
    ld hl, VIDEORAM_BASE
    ld de, VIDEORAM_BASE+1
    ld (hl), 0
    ldir
    ld bc, $0fff
    ld (hl), ' '
    ldir

    ld a, $16
    out0 (CBR), a

    call putsi
    db 'Boot'
    db 0

    ; The actual sector load loop.

    ld bc, 1            ; sector number
    ld hl, $f800        ; temp buffer
    ld e, 12            ; number of sectors
    ld d, APPSTART/256  ; page of destination address (relative to $20000)
loadloop:
    push bc
    push de
    push hl
    ld a, 6             ; read sector
    rst $28
    jr c, error

    ld a, '.'
    call putbyte
    pop hl
    pop de
    pop bc

    ; Copy the read sector out of the temporary buffer and into user RAM.

    push hl
    push de
    push bc
    ld hl, $f800        ; source: the disk buffer
    ld e, 0             ; dest in de: application memory
    ld bc, $100         ; length: one sector
    ldir
    pop bc
    pop de
    pop hl

    inc bc              ; advance to next sector
    inc d               ; ...and next address
    dec e               ; ...reduce count
    jr nz, loadloop

    ld a, 2             ; motor off
    rst $28
    di

    call putsi
    db 'go!'
    db 0

    ; And go.

    ld sp, $6100
    ld c, $02
    out0 (CBR), c
    jp APPSTART
    
error:
    call putsi
    db 'ERROR!'
    db 0
    jr $

putbyte:
    ld c, $02
    out0 (CBR), c

    ld de, (cursor)
    ld (de), a
    inc de
    ld (cursor), de

    ld c, $16
    out0 (CBR), c
    ret

; Writes the string at de to hl
puts:
    ld a, (hl)
    inc hl
    or a
    ret z

    call putbyte
    jr puts

putsi:
    pop hl
    call puts
    jp (hl)

; prints HL
puthex16:
    ld a, h
    call puthex8
    ld a, l
puthex8:
    ld c, a
    rra
    rra
    rra
    rra
    call .1
    ld a, c
.1
    and 15
    add a, 0x90
    daa
    adc a, 0x40
    daa
    push hl
    push bc
    call putbyte
    pop bc
    pop hl
    ret

cursor:
    dw VIDEORAM_BASE+0x1000

; vim: ts=4 sw=4 et ft=asm

