    global DPYCURS
    global DPYCLRA
    global DPYCLRL
    global DPYDELL
    global DPYIDLE
    global DPYINIT
    global DPYINSL
    global DPYPRNA
    global DPYPRNU
    global DPYFLSH

    extern DMALDIR
    extern DMALDDR
    extern INTREAD

    maclib constants
    maclib z180
    maclib jif

	cseg

DPYINIT:
    ld de, 0x0a60       ; cursor 1 start
    call set_6544_reg
    ld de, 0x0bff       ; cursor 1 end
    call set_6544_reg
    ld de, 0x2100       ; no padding between video memory rows
    call set_6544_reg
    ld de, 0x200e
    ret

set_6544_reg:
    out0 (VIDEO_ADDR), d
    nop
    out0 (VIDEO_DATA), e
    ret

; Called when the input serial port is idle.
DPYIDLE:
    ld hl, is_idle
    bit 0, (hl)
    ret nz                  ; do nothing if already idle
    inc (hl)                ; mark as idle

    ; Calculate video memory line address
    ld de, (cursor_pos)
    ld hl, video_memory_address_table
    ld a, d
    add a
    adda16 h, l             ; [address] -> hl

    ld a, (hl)
    inc hl
    ld h, (hl)
    ld l, a                 ; address -> hl

    ; Calculate address of cursor
    ld a, e
    adda16 h, l             ; address -> hl

    ld a, 15
    out0 (VIDEO_ADDR), a
    nop
    out0 (VIDEO_DATA), l
    ld a, 14
    out0 (VIDEO_ADDR), a
    ld a, h
    and $0f
    out0 (VIDEO_DATA), a

    ; Cursor on.
    ld de, 0x0a60       ; cursor 1 start
    call set_6544_reg

    ; Adjust the bank being refreshed so that the block where the cursor
    ; is gets refreshed first.

    ld a, (cursor_pos+1)    ; get Y
    rra
    rra                     ; rotate right by two
    dec a                   ; bank is incremented _before_ drawing
    and 3                   ; mask off junk bits
    ld (displayed_bank), a

    ret

dpybusy:
    ld hl, is_idle
    bit 0, (hl)
    ret z                   ; do nothing if already busy
    dec (hl)

    ; Cursor off.

    ld de, 0x0a20       ; cursor 1 start
    call set_6544_reg

    ret

; B = attributes; C = char; DE = (y, x)
; Always exits through display_screencode.
DPYPRNA:
    ; Convert ASCII value
    ld a, c
    sub 0x20
    ld hl, character_map_table
    adda16 h, l
    ld c, (hl)              ; screencode
    ; fall through

display_screencode:
    call calc_backbuffer_address
    ld (hl), c

    set 3, h                ; convert address to attribute space
    ld (hl), b

    jr dpybusy

; Given a cursor location in de, calculates the address in hl.
calc_backbuffer_address:
    ; Calculate line address
    ld hl, back_buffer_address_table
    ld a, d
    add a
    adda16 h, l             ; (address) -> hl

    ld a, (hl)
    inc hl
    ld h, (hl)
    ld l, a                 ; address -> hl

    ; Calculate address of cursor
    ld a, e
    adda16 h, l
    ret

; B = attributes; HL = char; DE = (y, x)
; Always exits through display_screencode.
DPYPRNU:
    ld a, h
    or a
    jif nz                  ; top byte non-zero?
        push de
        push bc
        call convert_unicode
        pop bc
        pop de
        ld c, a
        jr display_screencode
    jendif

    bit 7, l
    jif nz                  ; low unicode?
        ld a, l
        and 0x7f
        sub 0x20
        jif c
            ld c, 0x0d              ; dotted box
            jr display_screencode
        jendif
        ld hl, unicode_low_table
        adda16 h, l
        ld c, (hl)              ; screencode
        jr display_screencode
    jendif

    ld c, l
    jr DPYPRNA               ; actually ASCII

; Convert the codepoint in hl to a brother char in a.

convert_unicode:
    ld b, h
    ld c, l                 ; char -> bc
    ld hl, unicode_map_table
.1
    ld e, (hl)
    inc hl
    ld d, (hl)
    inc hl
    bit 7, d
    jr nz, .2
    ld a, (hl)
    inc hl                  ; candidate codepoint -> hl, brother -> a

    ex de, hl               ; candidate -> hl, pointer -> de
    ccf
    sbc hl, bc
    ret z                   ; return if matches
    ex de, hl               ; pointer -> hl
    jr .1

.2
    ld a, 0x0d              ; dotted box
    ret

; On entry: DE = (y, x)
DPYCURS:
    ld (cursor_pos), de
    jr dpybusy

; On entry: DE = (y, x)
DPYDELL:
    ld a, SCREEN_HEIGHT-1
    cp d
    jif nz                  ; not on the last line?
        ld e, 0                 ; x = 0
        call calc_backbuffer_address ; line address -> hl

        ex de, hl               ; line address -> de
        ld hl, back_buffer_end - SCREEN_WIDTH
        ccf
        sbc hl, de
        ld b, h
        ld c, l                 ; amount to copy -> bc

        ld h, d
        ld l, e
        ld a, SCREEN_WIDTH
        adda16 h, l             ; line+1 -> hl, line -> de
        call DMALDIR            ; [hl++] -> [de++]

        set 3, d                ; convert addresses to attribute
        set 3, h
        call DMALDIR            ; [hl++] -> [de++]
    jendif

blank_last_line:
    ld hl, back_buffer + (SCREEN_HEIGHT-1)*SCREEN_WIDTH
    ld de, back_buffer + (SCREEN_HEIGHT-1)*SCREEN_WIDTH + 1
    ld bc, SCREEN_WIDTH - 1

    ld (hl), ' '
    call DMALDIR            ; [hl++] -> [de++]

    set 3, d                ; convert addresses to attribute
    set 3, h

    ld (hl), 0
    call DMALDIR            ; [hl++] -> [de++]
    jr dpybusy

; On entry: DE = (y, x)
DPYINSL:
    ld a, SCREEN_HEIGHT-1
    cp d
    jr z, blank_last_line   ; on the last line?

    ld e, 0                 ; x = 0
    call calc_backbuffer_address ; line address -> hl
    push hl

    ex de, hl               ; line address -> de
    ld hl, back_buffer_end - SCREEN_WIDTH
    ccf
    sbc hl, de
    ld b, h
    ld c, l                 ; amount to copy -> bc

    ld hl, back_buffer + (SCREEN_HEIGHT-2)*SCREEN_WIDTH + (SCREEN_WIDTH-1)
    ld de, back_buffer + (SCREEN_HEIGHT-1)*SCREEN_WIDTH + (SCREEN_WIDTH-1)
    call DMALDDR            ; [hl--] -> [de--]

    set 3, d                ; convert addresses to attribute
    set 3, h
    call DMALDDR            ; [hl++] -> [de++]

    pop hl
    call clear_line_in_hl
    jr dpybusy

; On entry: DE = (y, x)
DPYCLRL:
    ld e, 0                 ; x = 0
    call calc_backbuffer_address

clear_line_in_hl:
    ld d, h
    ld e, l
    inc de
    ld (hl), ' '
    ld bc, SCREEN_WIDTH - 1
    call DMALDIR            ; [hl] -> [de]

    set 3, h                ; convert addresses to attribute space
    set 3, d
    ld (hl), 0
    call DMALDIR            ; [hl] -> [de]
    jr dpybusy

; Clears rows d (inclusive) to e (exclusive).
DPYCLRA:
    ld a, d
    cp e
    ret z                   ; do nothing if nothing to do

    ; Are we clearing the entire screen?

    ld hl, SCREEN_HEIGHT    ; 0 -> h, SCREEN_HEIGHT -> l
    ccf
    sbc hl, de
    jr z, DPYCLRS           ; use optimised routine

    ; Clear the actual screen area.

    ld a, e
    add a                   ; *2
    ld hl, back_buffer_address_table
    adda16 h, l
    ld a, (hl)
    inc hl
    ld h, (hl)
    ld l, a                 ; address of last exclusive row -> hl
    ex de, hl               ; address of last exclusive row -> de, range -> hl

    ld a, h
    add a                   ; *2
    ld hl, back_buffer_address_table
    adda16 h, l
    ld a, (hl)
    inc hl
    ld h, (hl)
    ld l, a                 ; address of first row -> hl

    ex de, hl               ; first -> de, last -> hl
    ccf
    sbc hl, de              ; hl -> number of bytes
    dec hl                  ; hl -> number of bytes - 1
    ld b, h
    ld c, l                 ; bc -> number of bytes - 1

    ld h, d
    ld l, e                 ; first -> hl, de
    inc de                  ; first+1 byte -> de
    
    ld (hl), ' '
    call DMALDIR

    set 3, h                ; convert addresses to attribute space
    set 3, d
    ld (hl), 0
    call DMALDIR            ; [hl] -> [de]

    jr dpybusy

; Clears the entire screen.
DPYCLRS:
    ; Clear the screen itself.

    ld hl, back_buffer
    ld de, back_buffer+1
    ld bc, SCREEN_WIDTH*SCREEN_HEIGHT - 1
    ld (hl), ' '
    call DMALDIR

    set 3, h                ; convert addresses to attribute space
    set 3, d
    ld (hl), 0
    call DMALDIR            ; [hl] -> [de]
    jr dpybusy

; Flushes the backbuffer to the frontbuffer, if safe.
DPYFLSH:
    ld hl, old_blanking
    ld c, (hl)              ; load old blanking state

    ld a, 31
    out0 (VIDEO_ADDR), a
    nop
    in0 a, (VIDEO_DATA)
    and 0x02
    ld (hl), a              ; save blanking state

    ret z                   ; return if not in blanking period
    ld a, c
    or a
    ret nz                  ; return if we _were_ in blanking period

    ; Advance the block counter.

    ld hl, displayed_bank
    ld a, (hl)
    inc a
    and 3
    ld (hl), a
    
    ; Get the offset of the block to update.

    add a
    ld hl, page_array
    adda16 h, l
    ld c, (hl)
    inc hl
    ld b, (hl)

    ; Set up for DMA.

    ld a, 0x02              ; physical address = 0x020000 + back_buffer
    out0 (SAR0B), a
    ld a, 0x01              ; physical address = 0x010000 + video memory address
    out0 (DAR0B), a

    ld a, 0x02
    out0 (DMODE), a
    ld a, 0x40
    out0 (DCNTL), a

    ; Update the character data.

    ld hl, back_buffer
    add hl, bc
    out0 (SAR0H), h
    out0 (SAR0L), l

    ld hl, 0x1000
    add hl, bc
    out0 (DAR0H), h
    out0 (DAR0L), l

    ld hl, SCREEN_WIDTH*4
    out0 (BCR0H), h
    out0 (BCR0L), l

    ld a, 0x40
    out0 (DSTAT), a

    ; Update the attribute data.

    ld hl, attr_buffer
    add hl, bc
    out0 (SAR0H), h
    out0 (SAR0L), l

    out0 (DAR0H), b
    out0 (DAR0L), c

    ld hl, SCREEN_WIDTH*4
    out0 (BCR0H), h
    out0 (BCR0L), l

    ld a, 0x40
    out0 (DSTAT), a
    ret

; Page array: points at the four-line blocks we update each frame.

page_array:
    dw SCREEN_STRIDE*0
    dw SCREEN_STRIDE*4
    dw SCREEN_STRIDE*8
    dw SCREEN_STRIDE*12

; Maps from ASCII (minus $20) to the Brother character set.

character_map_table:
    db ' ', '!', '"', '#', '$', '%', '&', $27
    db '(', ')', '*', '+', ',', '-', '.', '/'
    db '0', '1', '2', '3', '4', '5', '6', '7'
    db '8', '9', ':', ';', '<', '=', '>', '?'
    db '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G'
    db 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'
    db 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W'
    db 'X', 'Y', 'Z', '[', $eb, ']', $8b, '_'
    db $8d, 'a', 'b', 'c', 'd', 'e', 'f', 'g'
    db 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'
    db 'p', 'q', 'r', 's', 't', 'u', 'v', 'w'
    db 'x', 'y', 'z', $cc, $9b, $cd, $8f, $0d

; Maps from Unicode (minus $a0) to the Brother character set.

unicode_low_table:
    db ' ', $11, $19, $10, $18, $16, $9b, $7e ; a0
    db $8c, $9d, $9a, $0d, $0d, ' ', $91, $0d ; a8
    db $60, $5c, $5e, $7f, $eb, $dd, $7d, $0d ; b0
    db $0d, $a1, $60, $0d, $7b, $7c, $1e, $12 ; b8
    db 'A', 'A', 'A', 'A', $a2, 'A', $0d, $b8 ; c0
    db 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I' ; c8
    db 'D', $14, 'O', 'O', 'O', 'O', $b6, $17 ; d0
    db 'O', 'U', 'U', 'U', $ab, 'Y', $0d, $13 ; d8
    db $e1, 'a', $ec, 'a', $a3, 'a', $0d, $e8 ; e0
    db $e2, $e4, $e7, 'e', 'i', 'i', 'i', $e5 ; e8
    db $0d, $15, 'o', 'o', $e9, 'o', $e6, $98 ; f0
    db 'o', $e3, 'u', 'u', 'u', 'y', $0d, 'y' ; f8

; Maps from 16-bit unicode to the Brother character set.

unicode macro u, b
    dw u
    db b
endm

unicode_map_table:
    unicode 0x2190, 0x01 ; right arrow
    unicode 0x25b7, 0x01 ; right arrow
    unicode 0x21b2, 0x02 ; 'return' arrow
    unicode 0x21e5, 0x03 ; right arrow to bar
    unicode 0x2500, 0x05 ; horizontal bar
    unicode 0x2502, 0x0f ; vertical bar
    unicode 0x250c, 0x20 ; top-left corner
    unicode 0x2510, 0x20 ; top-right corner
    unicode 0x2514, 0x20 ; bottom-left corner
    unicode 0x2518, 0x20 ; bottom-right corner
    unicode 0x2594, 0x05 ; horizontal bar
    unicode 0x25ba, 0x06 ; right triangle
    unicode 0x25c4, 0x07 ; left triangle
    unicode 0x25bc, 0x08 ; down triangle black
    unicode 0x25cc, 0x0d ; dotted circle / box

    unicode 0x00a0, 0x20 ; non-breaking space
    unicode 0x00a1, 0x11 ; inverted exclamation mark
    unicode 0x00a2, 0x19 ; cent sign
    unicode 0x00a3, 0x10 ; pound sign
    unicode 0x00a9, 0x9d ; copyright sign
    unicode 0x00ae, 0x91 ; registered sign
    unicode 0x00bf, 0x12 ; inverted question mark
    unicode 0x2018, 0xfa ; left quote
    unicode 0x2019, 0xfb ; right quote
    unicode 0x201c, 0x22 ; left double quote
    unicode 0x201d, 0x22 ; right double quote

    dw 0xff

back_buffer_address_table:
    line_no = 0
    rept SCREEN_HEIGHT + 1
        dw back_buffer + line_no*SCREEN_WIDTH
        line_no = line_no + 1
    endm

video_memory_address_table:
    line_no = 0
    rept SCREEN_HEIGHT
        dw VIDEORAM_BASE + line_no*SCREEN_STRIDE + 0x1000
        line_no = line_no + 1
    endm

    dseg
old_blanking: db 0
displayed_bank: db 0
is_idle: db 0
cursor_pos: dw 0

    aseg
    ; Deliberately chosen so that setting bit 11 switches address to the
    ; attribute buffer.
    org 0xd000
back_buffer: ds SCREEN_WIDTH * SCREEN_HEIGHT
back_buffer_end:
    org 0xd800
attr_buffer: ds SCREEN_WIDTH * SCREEN_HEIGHT
attr_buffer_end:

; vim: ts=4 sw=4 et ft=asm

