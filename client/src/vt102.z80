    extern ADDAHL
    extern DPYCLRL
    extern DPYCURS
    extern DPYDELL
    extern DPYINSL
    extern DPYPRNA
    extern DPYPRNU
    extern KBDTYPE

    global TTYPUTC
    global TTYINIT

    maclib constants

NPARS = 16

defstate macro name
set_state_$name:
	ld hl, state_$name
	ld (current_state), hl
	ret
state_$name:
	endm

TTYINIT:
    ld hl, 0
    ld (tty_cursorx), hl
    xor a
    ld (current_state), a
    call do_ed_all
    ld de, 0
    jp DPYCURS

	; On entry: C = character to print
TTYPUTC:
    ld a, c
    or a
    ret z

	ld hl, (current_state)
	jp (hl)

; WAITING: waiting for a character

defstate waiting
	bit 7, c
	jp nz, start_utf8_sequence
print_ascii:
    call set_state_waiting
    ld a, c
    sub 8
    jp z, do_backspace
    dec a               ; compare with 9
    jp z, do_tab
    dec a               ; compare with 10
    jp z, tty_linefeed
    dec a               ; compare with 11
    jp z, tty_linefeed
    dec a               ; compare with 12
    jp z, tty_linefeed
    dec a               ; compare with 13
    jp z, tty_carriagereturn
    sub 27 - 13         ; compare with 27
    jp z, set_state_escape
    sub 32 - 27         ; compare with 32
    ret z

print_printable:
    ld a, c
    ld de, (tty_cursorx)
    call DPYPRNA
    ; fall through
advance_cursor:
    ld hl, tty_cursorx
    inc (hl)
    ld a, SCREEN_WIDTH
    cp (hl)
    jp nz, update_cursor

    ld (hl), 0          ; reset X to zero
    jp tty_linefeed

print_utf8:
    ld hl, (utf8_char)
    ld de, (tty_cursorx)
    call DPYPRNU
    jr advance_cursor

; UTF8_TRAILER: reading UTF-8 trailer bytes

defstate utf8_trailer
    ld hl, (utf8_char)
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    ld a, 0x3f
    and c
    or l
    ld l, a
    ld (utf8_char), hl

    ld hl, pending_utf8_bytes
    dec (hl)
    ret nz
    jp print_utf8

; ESCAPE: seen a ESC

defstate escape
    call set_state_waiting
    ld a, c
    cp 'D'
    jp z, tty_linefeed
    cp 'E'
    jp z, tty_newline
    cp 'M'
    jp z, tty_reverse_linefeed
    cp 'Z'
    jp z, do_csi_da
    cp '7'
    jp z, do_decsc
    cp '8'
    jp z, do_decrc
    cp '['
    jp z, init_state_csi
    cp '%'
    jp z, set_state_gobble_1
    cp '('
    jp z, set_state_gobble_1
    cp '#'
    jp z, set_state_gobble_1
    ret

; GOBBLE_1: discards the next character

defstate gobble_1
    jp set_state_waiting

; CSI: the big, complicated one

init_state_csi:
    ld hl, start_csi_state
    ld de, start_csi_state+1
    ld (hl), 0
    ld bc, (end_csi_state - start_csi_state) - 1
    ldir
    ; falls through
defstate csi
    ld a, c

    cp '?'          ; 'private' flag
    jp nz, .1
    ld hl, tty_commandflags
    set COMMANDFLAG_PRIVATE_BIT, (hl)
    ret
.1
    cp ';'          ; advance to next parameter
    jp nz, .2
    ld a, (tty_currentparam)
    cp NPARS - 1
    ret z
    inc a
    ld (tty_currentparam), a
    ret
.2
    cp '0'
    jp c, set_state_waiting     ; invalid char, give up
    cp '9'+1
    jp nc, .3
    ; Parse decimal parameter: first calculate the parameter address
    ld a, (tty_currentparam)
    add a
    ld hl, tty_parameters
    call ADDAHL
    ; Load parameter
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl                   ; parameter -> hl, address+1 -> de
    ; Multiply by ten: x*10 = (x*8) + (x*2)
    add hl, hl                  ; hl = parameter * 2
    push bc
    ld b, h
    ld c, l                     ; bc = parameter * 2
    add hl, hl                  ; hl = parameter * 4
    add hl, hl                  ; hl = parameter * 8
    add hl, bc                  ; hl = parameter * 8 + parameter * 2
    pop bc
    ; Add digit
    ld a, c
    sub '0'
    call ADDAHL
    ; Store parameter
    ex de, hl                   ; address+1 -> hl, parameter -> de
    ld (hl), d
    dec hl
    ld (hl), e
    ret
.3
    ; If we got here, we're a command byte
    call set_state_waiting
    ld hl, tty_commandflags
    bit COMMANDFLAG_PRIVATE_BIT, (hl)
    jp nz, csi_private

    ; Non-private command set here
    
csi_non_private:
    ld a, c
    cp '@'
    jp z, do_csi_ich
    cp 'A'
    jp z, do_csi_cuu
    cp 'B'
    jp z, do_csi_cud
    cp 'C'
    jp z, do_csi_cuf
    cp 'D'
    jp z, do_csi_cub
    cp 'E'              ; CNL, move down and go to column one
    jp nz, .1
    xor a
    ld (tty_cursorx), a
    jp do_csi_cud
.1
    cp 'F'              ; CPL, move dup and go to column one
    jp nz, .2
    xor a
    ld (tty_cursorx), a
    jp do_csi_cuu
.2
    cp 'G'
    jp z, do_csi_cha
    cp 'H'
    jp z, do_csi_cup
    cp 'J'              ; ED, erase display
    jp nz, .3
    ld a, (tty_parameters+0)
    or a
    jp z, do_ed_cursor_to_end
    dec a
    jp z, do_ed_start_to_cursor
    jp do_ed_all
.3
    cp 'K'              ; EL, erase line
    jp nz, .4
    ld a, (tty_parameters+0)
    or a
    jp z, do_csi_el_cursor_to_end
    dec a
    jp z, do_csi_el_start_to_cursor
    jp do_csi_el_all
.4
    cp 'L'
    jp z, do_csi_il
    cp 'M'
    jp z, do_csi_dl
    cp 'c'
    jp z, do_csi_da
    cp 'f'
    jp z, do_csi_cup
    cp 'n'
    jp z, do_csi_dsr
    ret
csi_private:
    ; Private command set here
    ret

; Inserts (tty_parameters+0) blank characters.
do_csi_ich:
    ld hl, tty_parameters+0
    ld b, (hl)
.1
    push bc
    ld c, ' '
    call print_printable
    pop bc
    djnz .1
    ret

; Moves cursor up by (tty_parameters+0) rows (no scrolling).
do_csi_cuu:
    ld hl, tty_cursory
    ld a, (tty_parameters+0)
    or a
    jp nz, .2
    inc a
.2
    neg
    add (hl)
    jp c, .1
    xor a
.1
    ld (tty_cursory), a
    jp update_cursor

; Moves cursor down by (tty_parameters+0) rows (no scrolling).
do_csi_cud:
    ld hl, tty_cursory
    ld a, (tty_parameters+0)
    or a
    jp nz, .2
    inc a
.2
    add (hl)
    cp SCREEN_HEIGHT
    jp c, .1
    ld a, SCREEN_HEIGHT-1
.1
    ld (tty_cursory), a
    jp update_cursor

; Moves cursor left by (tty_parameters+0) rows (no wrap).
do_csi_cub:
    ld hl, tty_cursorx
    ld a, (tty_parameters+0)
    or a
    jp nz, .2
    inc a
.2
    neg
    add (hl)
    jp c, .1
    xor a
.1
    ld (tty_cursorx), a
    jp update_cursor

; Moves cursor right by (tty_parameters+0) rows (no wrap).
do_csi_cuf:
    ld hl, tty_cursorx
    ld a, (tty_parameters+0)
    or a
    jp nz, .2
    inc a
.2
    add (hl)
    cp SCREEN_WIDTH
    jp c, .1
    ld a, SCREEN_WIDTH-1
.1
    ld (tty_cursorx), a
    jp update_cursor

; Move to indicated column in current row.
do_csi_cha:
    ld a, (tty_parameters+0)
    jp tty_setx

; Move to a particular location.
do_csi_cup:
    ld a, (tty_parameters+0)
    call tty_sety
    ld a, (tty_parameters+2)
    jp tty_setx
    
; Erase from start to cursor.
do_ed_start_to_cursor:
    ld a, (tty_cursory)
    ld e, a
    call erase_lines_d_to_e
    jp do_csi_el_start_to_cursor

; Erase from cursor to end.
do_ed_cursor_to_end:
    ld a, (tty_cursory)
    inc a
    ld d, a
    ld e, SCREEN_HEIGHT
    call erase_lines_d_to_e
    jp do_csi_el_cursor_to_end

; Erase all.
do_ed_all:
    ld de, SCREEN_HEIGHT
    ; fall through
; Erase lines d to e-1.
erase_lines_d_to_e:
    ld a, d
    cp e
    ret z                   ; do nothing if nothing to do

.1
    push de
    call DPYCLRL
    pop de

    inc d
    cp a, d
    cp e
    jp nz, .1
    ret
    
; Erase from start of line to cursor.
do_csi_el_start_to_cursor:
    ld hl, (tty_cursorx)
    push hl

    ld b, l
    xor a
    ld (tty_cursorx), a

    ld c, ' '
.1
    push bc
    call print_printable
    pop bc
    djnz .1

    pop hl
    ld (tty_cursorx), hl
    ret

do_csi_el_cursor_to_end:
    ld hl, (tty_cursorx)
    push hl

    xor a
    ld (tty_cursorx), a

    ld a, SCREEN_WIDTH
    sub l
    ld b, a
    ld c, ' '
.1
    push bc
    call print_printable
    pop bc
    djnz .1

    pop hl
    ld (tty_cursorx), hl
    ret

; Erase current line.
do_csi_el_all:
    ld de, (tty_cursorx)
    jp DPYCLRL

; Insert lines.
do_csi_il:
    ld a, (tty_parameters+0)
    or a
    jr nz, .1
    inc a
.1
    ld b, a
.2
    push bc
    ld a, (tty_cursory)
    ld d, a
    call DPYINSL
    pop bc
    djnz .2
    ret

; Delete lines.
do_csi_dl:
    ld a, (tty_parameters+0)
    or a
    jr nz, .1
    inc a
.1
    ld b, a
.2
    push bc
    ld a, (tty_cursory)
    ld d, a
    call DPYDELL
    pop bc
    djnz .2
    ret

; Identify terminal.
do_csi_da:
    ld hl, .1
    jp typeback_hl
.1:
    db 27, "[?6c", 0

; Save cursor and attributes.
do_decsc:
    ld hl, (tty_cursorx)
    ld (saved_cursorx), hl
    ret

; Restore cursor and attributes
do_decrc:
    ld hl, (saved_cursorx)
    ld (tty_cursorx), hl
    jp update_cursor

    dseg
saved_cursorx: db 0
saved_cursory: db 0
    cseg

; Device status report --- what is reported varies by parameter.
do_csi_dsr:
    ld a, (tty_parameters+0)
    cp 5                ; Terminal status?
    jp z, do_csi_dsr_terminal_status
    cp 6                ; Report cursor position?
    jp z, do_csi_dsr_report_cursor_position
    ret

do_csi_dsr_terminal_status:
    ld hl, .1
    jp typeback_hl
.1
    db 27, "[0n", 0

do_csi_dsr_report_cursor_position:
    ld a, 27
    call KBDTYPE
    ld a, '['
    call KBDTYPE
    ld a, (tty_cursory)
    inc a
    call typeback_decimal_a
    ld a, ';'
    call KBDTYPE
    ld a, (tty_cursorx)
    inc a
    call typeback_decimal_a
    ld a, 'R'
    jp KBDTYPE
    
; --- Simple motion ---------------------------------------------------------

update_cursor:
    ld de, (tty_cursorx)
    jp DPYCURS

do_backspace:
    ld a, (tty_cursorx)
    or a
    ret z

    dec a
    ld (tty_cursorx), a
    jp update_cursor

do_tab:
    ld a, (tty_cursorx)
    and ~7
    add 8
    cp SCREEN_WIDTH - 1
    ret nc

    ld (tty_cursorx), a
    jp update_cursor

tty_linefeed:
    ld a, (tty_cursory)
    cp SCREEN_HEIGHT - 1
    jp z, scroll_up
    inc a
    ld (tty_cursory), a
    jp update_cursor

tty_reverse_linefeed:
    ld a, (tty_cursory)
    or a
    jp z, scroll_down
    dec a
    ld (tty_cursory), a
    jp update_cursor

tty_newline:
    call tty_linefeed
    ; fall through
tty_carriagereturn:
    xor a
    ld (tty_cursorx), a
    jp update_cursor

; Set X coordinate to A (1 being the left column)
tty_setx:
    or a
    jp z, .1                ; zero means home
    dec a                   ; convert to our numbering scheme
.1
    cp SCREEN_WIDTH
    jp c, .2
    ld a, SCREEN_WIDTH-1
.2
    ld (tty_cursorx), a
    jp update_cursor

; Set Y coordinate to A (1 being the left column)
tty_sety:
    or a
    jp z, .1                ; zero means home
    dec a                   ; convert to our numbering scheme
.1
    cp SCREEN_HEIGHT
    jp c, .2
    ld a, SCREEN_HEIGHT-1
.2
    ld (tty_cursory), a
    jp update_cursor

; --- UTF-8 handling --------------------------------------------------------

start_utf8_sequence:
    call parse_utf8_leader
    or a
    jp z, .1
    ld (pending_utf8_bytes), a
    ld a, b
    and c           ; mask leader byte
    ld l, a
    ld h, 0
    ld (utf8_char), hl
    jp set_state_utf8_trailer
.1
    ; Got an invalid UTF-8 byte
    ld a, 0x7f
    and c           ; crudely convert to ASCII
    jp print_ascii

parse_utf8_leader:
	ld a, c
	srl a
	cp 0x7e			; 01111110, 6-byte sequence
	jp nz, .1
	ld a, 5			; number of remaining bytes
	ld b, 0x01		; leading char mask
	ret
.1
	srl a
	cp 0x3e         ; 00111110, 5-byte sequence
	jp nz, .2
	ld a, 4			; number of remaining bytes
	ld b, 0x03		; leading char mask
	ret
.2
	srl a
	cp 0x1e         ; 00011110, 4-byte sequence
	jp nz, .3
	ld a, 3			; number of remaining bytes
	ld b, 0x07		; leading char mask
	ret
.3
	srl a
	cp 0x0e         ; 00001110, 3-byte sequence
	jp nz, .4
	ld a, 2			; number of remaining bytes
	ld b, 0x0f		; leading char mask
	ret
.4
	srl a
	cp 0x06         ; 00000110, 2-byte sequence
	jp nz, .5
	ld a, 1			; number of remaining bytes
	ld b, 0x1f		; leading char mask
	ret
.5
	; invalid UTF-8 character
    ld a, 0
    ret

; --- Scrolling -------------------------------------------------------------

scroll_up:
    ld d, 0
    jp DPYDELL

scroll_down:
    ld d, SCREEN_HEIGHT-1
    jp DPYDELL

; --- Reporting -------------------------------------------------------------

; Types out the value in A.
typeback_decimal_a:
	ld c, -100
	call .1
	ld c, -10
	call .1
    ld c, -1
.1
    ld b, '0'-1
.2
    inc b
    add a, c
    jr c, .2
    sub c
    push af
    ld a, b
    call KBDTYPE
    pop af
    ret

; Types out the string pointed to by HL.
typeback_hl:
.1
    ld a, (hl)
    or a
    ret z
    inc hl
    push hl
    call KBDTYPE
    pop hl
    jp .1

; --- Variables -------------------------------------------------------------

	dseg
current_state: 		dw 0
pending_utf8_bytes: db 0
utf8_char:			dw 0

tty_cursorx:        db 0
tty_cursory:        db 0

start_csi_state:
tty_commandflags:   db 0
tty_currentparam:   db 0
tty_parameters:     ds 16*2
end_csi_state:

COMMANDFLAG_PRIVATE_BIT: equ 0
COMMANDFLAG_PRIVATE:     equ 1<<COMMANDFLAG_PRIVATE_BIT

; vim: ts=4 sw=4 et ft=asm

