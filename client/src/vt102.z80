    extern DPYCLRA
    extern DPYCLRL
    extern DPYCURS
    extern DPYDELL
    extern DPYIDLE
    extern DPYINSL
    extern DPYPRNA
    extern DPYPRNU
    extern KBDTYPE
    extern TTYPSI
    extern TTYPD16

    global TTYPUTC
    global TTYINIT
    global TTYTYPS
    global TTYTYPD

    maclib constants
    maclib jif

NPARS = 16

defstate macro name
set_state_$name:
	ld hl, state_$name
	ld (current_state), hl
	ret
state_$name:
	endm

TTYINIT:
    ld hl, 0
    ld (cursorx), hl
    ld hl, state_waiting
    ld (current_state), hl
    call do_ed_all
    ld de, 0
    jr DPYCURS

	; On entry: C = character to print
TTYPUTC:
    ld a, c
    or a
    jr z, DPYIDLE

	ld hl, (current_state)
	jp (hl)

; WAITING: waiting for a character

defstate waiting
	bit 7, c
	jr nz, start_utf8_sequence
print_ascii:
    call set_state_waiting
    ld a, c
    cp 8
    jr z, do_backspace
    cp 9
    jr z, do_tab
    cp 10
    jr z, do_linefeed
    cp 11
    jr z, do_linefeed
    cp 12
    jr z, do_linefeed
    cp 13
    jr z, do_carriagereturn
    cp 27
    jr z, set_state_escape
    cp 32
    ret c

print_printable:
    ld a, (attributes)
    ld b, a
    ld de, (cursorx)
    call DPYPRNA
    ; fall through
advance_cursor:
    ld hl, cursorx
    inc (hl)
    ld a, SCREEN_WIDTH
    cp (hl)
    jr nz, update_cursor

    ld (hl), 0          ; reset X to zero
    jr do_linefeed

print_utf8:
    ld a, (attributes)
    ld b, a
    ld hl, (utf8_char)
    ld de, (cursorx)
    call DPYPRNU
    jr advance_cursor

; UTF8_TRAILER: reading UTF-8 trailer bytes

defstate utf8_trailer
    ld hl, (utf8_char)
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    ld a, 0x3f
    and c
    or l
    ld l, a
    ld (utf8_char), hl

    ld hl, pending_utf8_bytes
    dec (hl)
    ret nz
    call set_state_waiting
    jr print_utf8

; ESCAPE: seen a ESC

defstate escape
    call set_state_waiting
    ld a, c
    cp 'D'
    jr z, do_linefeed
    cp 'E'
    jr z, do_newline
    cp 'M'
    jr z, do_reverse_linefeed
    cp 'Z'
    jr z, do_csi_da
    cp '7'
    jr z, do_decsc
    cp '8'
    jr z, do_decrc
    cp '['
    jr z, init_state_csi
    cp '%'
    jr z, set_state_gobble_1
    cp '('
    jr z, set_state_gobble_1
    cp '#'
    jr z, set_state_gobble_1
    ret

; GOBBLE_1: discards the next character

defstate gobble_1
    jr set_state_waiting

; CSI: the big, complicated one

init_state_csi:
    ld hl, start_csi_state
    ld de, start_csi_state+1
    ld (hl), 0
    ld bc, (end_csi_state - start_csi_state) - 1
    ldir
    ; falls through
defstate csi
    ld a, c

    cp '?'          ; 'private' flag
    jif z
        ld hl, commandflags
        set COMMANDFLAG_PRIVATE_BIT, (hl)
        ret
    jendif

    cp ';'          ; advance to next parameter
    jif z
        ld hl, currentparam
        ld a, (hl)
        cp NPARS - 1
        ret z
        inc (hl)
        ret
    jendif

    cp '0'
    jr c, set_state_waiting     ; invalid char, give up
    cp '9'+1
    jif c                       ; if it's a digit, this is a number
        ; Parse decimal parameter: first calculate the parameter address
        ld a, (currentparam)
        add a
        ld hl, parameters
        adda16 h, l
        ; Load parameter
        ld e, (hl)
        inc hl
        ld d, (hl)
        ex de, hl                   ; parameter -> hl, address+1 -> de
        ; Multiply by ten: x*10 = (x*8) + (x*2)
        add hl, hl                  ; hl = parameter * 2
        push bc
        ld b, h
        ld c, l                     ; bc = parameter * 2
        add hl, hl                  ; hl = parameter * 4
        add hl, hl                  ; hl = parameter * 8
        add hl, bc                  ; hl = parameter * 8 + parameter * 2
        pop bc
        ; Add digit
        ld a, c
        sub '0'
        adda16 h, l
        ; Store parameter
        ex de, hl                   ; address+1 -> hl, parameter -> de
        ld (hl), d
        dec hl
        ld (hl), e
        ret
    jendif

    ; If we got here, we're a command byte
    call set_state_waiting
    ld hl, commandflags
    bit COMMANDFLAG_PRIVATE_BIT, (hl)
    jr nz, csi_private

    ; Non-private command set here
    
csi_non_private:
    ld a, c
    cp 'A'
    jr z, do_csi_cuu
    cp 'B'
    jr z, do_csi_cud
    cp 'C'
    jr z, do_csi_cuf
    cp 'D'
    jr z, do_csi_cub
    cp 'E'              ; CNL, move down and go to column one
    jif z
        xor a
        ld (cursorx), a
        jr do_csi_cud
    jendif

    cp 'F'              ; CPL, move dup and go to column one
    jif z
        xor a
        ld (cursorx), a
        jr do_csi_cuu
    jendif

    cp 'G'
    jr z, do_csi_cha
    cp 'H'
    jr z, do_csi_cup
    cp 'J'              ; ED, erase display
    jif z
        ld a, (parameters+0)
        or a
        jr z, do_ed_cursor_to_end
        dec a
        jr z, do_ed_start_to_cursor
        jr do_ed_all
    jendif

    cp 'K'              ; EL, erase line
    jr nz, .4
    ld a, (parameters+0)
    or a
    jr z, do_csi_el_cursor_to_end ; param = 0
    dec a
    jr z, do_csi_el_start_to_cursor ; param = 1
    jr do_csi_el_all    ; everything else
.4
    cp 'L'
    jr z, do_csi_il
    cp 'M'
    jr z, do_csi_dl
    cp 'c'
    jr z, do_csi_da
    cp 'f'
    jr z, do_csi_cup
    cp 'n'
    jr z, do_csi_dsr
    cp 'm'
    jr z, do_csi_sgr
    ret
csi_private:
    ; Private command set here
    ret

; Moves cursor up by (parameters+0) rows (no scrolling).
do_csi_cuu:
    ld hl, cursory
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif
    neg
    add (hl)
    jif nc
        xor a
    jendif
    ld (cursory), a
    jr update_cursor

; Moves cursor down by (parameters+0) rows (no scrolling).
do_csi_cud:
    ld hl, cursory
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif
    add (hl)
    cp SCREEN_HEIGHT
    jif nc
        ld a, SCREEN_HEIGHT-1
    jendif
    ld (cursory), a
    jr update_cursor

; Moves cursor left by (parameters+0) rows (no wrap).
do_csi_cub:
    ld hl, cursorx
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif
    neg
    add (hl)
    jif nc
        xor a
    jendif
    ld (cursorx), a
    jr update_cursor

; Moves cursor right by (parameters+0) rows (no wrap).
do_csi_cuf:
    ld hl, cursorx
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif
    add (hl)
    cp SCREEN_WIDTH
    jif nc
        ld a, SCREEN_WIDTH-1
    jendif
    ld (cursorx), a
    jr update_cursor

; Move to indicated column in current row.
do_csi_cha:
    ld a, (parameters+0)
    jr setx

; Move to a particular location.
do_csi_cup:
    ld a, (parameters+0)
    call sety
    ld a, (parameters+2)
    jr setx
    
; Erase from start to cursor.
do_ed_start_to_cursor:
    ld a, (cursory)
    ld e, a
    if EMULATE_DPYCLRA
        call erase_lines_d_to_e
    else
        call DPYCLRA
    endif
    jr do_csi_el_start_to_cursor

; Erase from cursor to end.
do_ed_cursor_to_end:
    ld a, (cursory)
    inc a
    ld d, a
    ld e, SCREEN_HEIGHT
    if EMULATE_DPYCLRA
        call erase_lines_d_to_e
    else
        call DPYCLRA
    endif
    jr do_csi_el_cursor_to_end

; Erase all.
do_ed_all:
    ld de, SCREEN_HEIGHT    ; 0 -> d, SCREEN_HEIGHT -> e
    if EMULATE_DPYCLRA
        jr erase_lines_d_to_e
    else
        jr DPYCLRA
    endif

    if EMULATE_DPYCLRA

; Erase lines d to e-1.
erase_lines_d_to_e:
    ld a, d
    cp e
    ret z                   ; do nothing if nothing to do

.1
    push de
    call DPYCLRL
    pop de

    inc d
    ld a, d
    cp e
    jr nz, .1
    ret
    
    endif

; Erase from start of line to cursor.
do_csi_el_start_to_cursor:
    ld de, (cursorx)
    ld a, e
    ld e, 0

.1
    cp e
    ret z

    push af
    push de
    ld bc, ' '
    call DPYPRNA
    pop de
    pop af

    inc e
    jr .1

do_csi_el_cursor_to_end:
    ld de, (cursorx)
.1
    ld a, SCREEN_WIDTH
    cp e
    ret z

    push af
    push de
    ld bc, ' '
    call DPYPRNA
    pop de
    pop af

    inc e
    jr .1

; Erase current line.
do_csi_el_all:
    ld de, (cursorx)
    jr DPYCLRL

; Insert lines.
do_csi_il:
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif

    ld b, a
.2
    push bc
    ld a, (cursory)
    ld d, a
    call DPYINSL
    pop bc
    djnz .2
    ret

; Delete lines.
do_csi_dl:
    ld a, (parameters+0)
    or a
    jif z
        inc a
    jendif

    ld b, a
.2
    push bc
    ld de, (cursorx)
    call DPYDELL
    pop bc
    djnz .2
    ret

; Identify terminal.
do_csi_da:
    ld hl, .1
    jr TTYTYPS
.1:
    db 27, "[?6c", 0

; Save cursor and attributes.
do_decsc:
    ld hl, (cursorx)
    ld (saved_cursorx), hl
    ld a, (attributes)
    ld (saved_attributes), a
    ret

; Restore cursor and attributes
do_decrc:
    ld hl, (saved_cursorx)
    ld (cursorx), hl
    ld a, (saved_attributes)
    ld (attributes), a
    jr update_cursor

    dseg
saved_cursorx: db 0
saved_cursory: db 0
saved_attributes: db 0
    cseg

; Device status report --- what is reported varies by parameter.
do_csi_dsr:
    ld a, (parameters+0)
    cp 5                ; Terminal status?
    jr z, do_csi_dsr_terminal_status
    cp 6                ; Report cursor position?
    jr z, do_csi_dsr_report_cursor_position
    ret

do_csi_dsr_terminal_status:
    ld hl, .1
    jr TTYTYPS
.1
    db 27, "[0n", 0

do_csi_dsr_report_cursor_position:
    ld a, 27
    call KBDTYPE
    ld a, '['
    call KBDTYPE
    ld a, (cursory)
    inc a
    call TTYTYPD
    ld a, ';'
    call KBDTYPE
    ld a, (cursorx)
    inc a
    call TTYTYPD
    ld a, 'R'
    jr KBDTYPE
    
do_csi_sgr:
    ld a, (currentparam)
    inc a
    ld b, a
    ld hl, parameters
.1
    ld e, (hl)
    inc hl
    ld d, (hl)
    inc hl

    push bc
    push hl
    call set_attribute
    pop hl
    pop bc

    djnz .1
    ret

; Set attribute in de.
set_attribute:
    ld a, d
    or a
    ret nz              ; don't support any attributes > 255

    ld hl, attributes
    ld a, e
    cp 0                ; all off
    jif z
        xor a
        ld (attributes), a
        ret
    jendif

    cp 1                ; bold on
    jif z
        set ATTRIBUTE_BOLD_BIT, (hl)
        ret
    jendif

    cp 4                ; underline on
    jif z
        set ATTRIBUTE_UNDERLINE_BIT, (hl)
        ret
    jendif

    cp 7                ; reverse video on
    jif z
        set ATTRIBUTE_REVERSE_BIT, (hl)
        ret
    jendif

    cp 22               ; bold off
    jif z
        res ATTRIBUTE_BOLD_BIT, (hl)
        ret
    jendif

    cp 24               ; underline off
    jif z
        res ATTRIBUTE_UNDERLINE_BIT, (hl)
        ret
    jendif

    cp 27               ; reverse video off
    jif z
        res ATTRIBUTE_REVERSE_BIT, (hl)
        ; fall through
    jendif
    ret

; --- Simple motion ---------------------------------------------------------

update_cursor:
    ld de, (cursorx)
    jr DPYCURS

do_backspace:
    ld a, (cursorx)
    or a
    ret z

    dec a
    ld (cursorx), a
    jr update_cursor

do_tab:
    ld de, (cursorx)
    ld a, SCREEN_WIDTH-1
    cp d
    ret z

    ld a, ~7
    and d
    ret z

    ld c, ' '
    call print_printable
    jr do_tab

do_linefeed:
    ld a, (cursory)
    cp SCREEN_HEIGHT - 1
    jr z, scroll_up
    inc a
    ld (cursory), a
    jr update_cursor

do_reverse_linefeed:
    ld a, (cursory)
    or a
    jr z, scroll_down
    dec a
    ld (cursory), a
    jr update_cursor

do_newline:
    call do_linefeed
    ; fall through
do_carriagereturn:
    xor a
    ld (cursorx), a
    jr update_cursor

; Set X coordinate to A (1 being the left column)
setx:
    or a
    jr z, .1                ; zero means home
    dec a                   ; convert to our numbering scheme
.1
    cp SCREEN_WIDTH
    jr c, .2
    ld a, SCREEN_WIDTH-1
.2
    ld (cursorx), a
    jr update_cursor

; Set Y coordinate to A (1 being the left column)
sety:
    or a
    jr z, .1                ; zero means home
    dec a                   ; convert to our numbering scheme
.1
    cp SCREEN_HEIGHT
    jr c, .2
    ld a, SCREEN_HEIGHT-1
.2
    ld (cursory), a
    jr update_cursor

; --- UTF-8 handling --------------------------------------------------------

start_utf8_sequence:
    call parse_utf8_leader
    or a
    jif nz
        ld (pending_utf8_bytes), a
        ld a, b
        and c           ; mask leader byte
        ld l, a
        ld h, 0
        ld (utf8_char), hl
        jr set_state_utf8_trailer
    jendif

    ; Got an invalid UTF-8 byte
    ld a, 0x7f
    and c           ; crudely convert to ASCII
    jr print_ascii

parse_utf8_leader:
	ld a, c
	srl a
	cp 0x7e			; 01111110, 6-byte sequence
    jif z
        ld a, 5			; number of remaining bytes
        ld b, 0x01		; leading char mask
        ret
    jendif

	srl a
	cp 0x3e         ; 00111110, 5-byte sequence
    jif z
        ld a, 4			; number of remaining bytes
        ld b, 0x03		; leading char mask
        ret
    jendif

	srl a
	cp 0x1e         ; 00011110, 4-byte sequence
    jif z
        ld a, 3			; number of remaining bytes
        ld b, 0x07		; leading char mask
        ret
    jendif

	srl a
	cp 0x0e         ; 00001110, 3-byte sequence
    jif z
        ld a, 2			; number of remaining bytes
        ld b, 0x0f		; leading char mask
        ret
    jendif

	srl a
	cp 0x06         ; 00000110, 2-byte sequence
    jif z
        ld a, 1			; number of remaining bytes
        ld b, 0x1f		; leading char mask
        ret
    jendif

	; invalid UTF-8 character
    ld a, 0
    ret

; --- Scrolling -------------------------------------------------------------

scroll_up:
    ld d, 0
    jr DPYDELL

scroll_down:
    ld d, 0
    jr DPYINSL

; --- Reporting -------------------------------------------------------------

; Types out the value in A in decimal.
TTYTYPD:
    ld d, 0             ; suppress zeroes
	ld c, -100
	call .1
	ld c, -10
	call .1
    ld c, -1
    dec d               ; don't suppress this zero
.1
    ld b, '0'-1
.2
    inc b
    add c
    jr c, .2
    sub c

    ; Did we get a zero?
    push af
    ld a, b
    cp '0'
    jr z, .3
    ; Not a zero.
    dec d               ; don't suppress zeroes any more

.4
    push de
    ld a, b
    call KBDTYPE
    pop de
    pop af
    ret

    ; We got a zero.
.3
    bit 7, d            ; are we suppressing zeroes?
    jr nz, .4
    pop af              ; restore stack
    ret

; Types out the string pointed to by HL.
TTYTYPS:
.1
    ld a, (hl)
    or a
    ret z
    inc hl
    push hl
    call KBDTYPE
    pop hl
    jr .1

; --- Variables -------------------------------------------------------------

	dseg
current_state: 		dw 0
pending_utf8_bytes: db 0
utf8_char:			dw 0

cursorx:            db 0
cursory:            db 0
attributes:         db 0

start_csi_state:    
commandflags:       db 0
currentparam:       db 0
parameters:         ds 16*2
end_csi_state:

COMMANDFLAG_PRIVATE_BIT: equ 0
COMMANDFLAG_PRIVATE:     equ 1<<COMMANDFLAG_PRIVATE_BIT

; vim: ts=4 sw=4 et ft=asm

